drop database if exists Ecommerce;
create database Ecommerce;
USE ECOMMERCE;
create table SUPPLIER(
SUPP_ID int primary key,
SUPP_NAME varchar(50)NOT NULL,
SUPP_CITY VARCHAR(50)NOT NULL,
SUPP_PHONE VARCHAR(50)NOT NULL
);

CREATE TABLE CUSTOMER(
CUS_ID INT primary KEY,
CUS_NAME VARCHAR(50)NOT NULL,
CUS_PHONE VARCHAR(10)NOT NULL,
CUS_CITY VARCHAR(30) NOT NULL,
CUS_GENDER CHAR
);

CREATE TABLE CATEGORY(
CAT_ID INT PRIMARY KEY,
CAT_NAME VARCHAR(20) NOT NULL
);

CREATE TABLE PRODUCT(
PRO_ID INT PRIMARY KEY,
PRO_NAME VARCHAR(20) NOT NULL DEFAULT 'DUMMY',
PRO_DESC VARCHAR(60),
CAT_ID INT,
FOREIGN KEY(CAT_ID) REFERENCES CATEGORY(CAT_ID)
);

CREATE TABLE SUPPLIER_PRICING(
PRICING_ID INT PRIMARY KEY,
PRO_ID INT,
SUPP_ID INT,
SUPP_PRICE INT DEFAULT 0,
FOREIGN KEY(PRO_ID) REFERENCES PRODUCT(PRO_ID),
FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER(SUPP_ID)
);

CREATE TABLE `ORDER` (
`ORD_ID` INT PRIMARY KEY,
`ORD_AMOUNT` INT NOT NULL,
`ORD_DATE` DATE NOT NULL,
`CUS_ID` INT,
`PRICING_ID` INT ,
FOREIGN KEY (`CUS_ID`) REFERENCES CUSTOMER(CUS_ID),
FOREIGN KEY (`PRICING_ID`) REFERENCES SUPPLIER_PRICING(PRICING_ID)
);

CREATE TABLE RATING(
RAT_ID INT primary KEY,
ORD_ID INT,
RAT_RATSTARS INT NOT NULL,
FOREIGN KEY (ORD_ID) REFERENCES `ORDER`(`ORD_ID`)
);

INSERT INTO SUPPLIER values(1,"Rajesh Retails","delhi",1234567890);
INSERT INTO SUPPLIER values(2,"Appario Ltd.","Mumbai",2589631470);
INSERT INTO SUPPLIER values(3,"Knome products","Banglore",	9785462315);
INSERT INTO SUPPLIER values(4,"Bansal Retails"	,"Kochi",8975463285);
INSERT INTO SUPPLIER values(5,"Mittal Ltd.","Lucknow",7898456532);

INSERT INTO CUSTOMER VALUES(1,"AAKASH",9999999999,"DELHI","M");
INSERT INTO CUSTOMER VALUES(2,"AMAN",9785463215,"NOIDA","M" );
INSERT INTO CUSTOMER VALUES(3,"NEHA",9999999999,"MUMBAI","F" );
INSERT INTO CUSTOMER VALUES(4,"MEGHA",9994562399,"KOLKATA","F" );
INSERT INTO CUSTOMER VALUES(5,"PULKIT",7895999999,"LUCKNOW","M");

INSERT INTO CATEGORY values(1,"BOOKS");
INSERT INTO CATEGORY values(2,"GAMES");
INSERT INTO CATEGORY values(3,"GROCERIES");
INSERT INTO CATEGORY values(4,"ELECTRONICS");
INSERT INTO CATEGORY values(5,"CLOTHES");

INSERT INTO PRODUCT VALUES(1,"GTA V","Windows 7 and above with i5 processor and 8GB RAM",2);
INSERT INTO PRODUCT VALUES(2,"TSHIRT","SIZE-L with Black, Blue and White variations",5);
INSERT INTO PRODUCT VALUES(3,"ROG LAPTOP","Windows 10 with 15inch screen, i7 processor, 1TB SSD",4);
INSERT INTO PRODUCT VALUES(4,"OATS","Highly Nutritious from Nestle",3);
INSERT INTO PRODUCT VALUES(5,"HARRY POTTER","Best Collection of all time by J.K Rowling",1);
INSERT INTO PRODUCT VALUES(6,"MILK","1L Toned MIlk",3);
INSERT INTO PRODUCT VALUES(7,"Boat Earphones","1.5Meter long Dolby Atmos",4);
INSERT INTO PRODUCT VALUES(8,"Jeans","Stretchable Denim Jeans with various sizes and color",5);
INSERT INTO PRODUCT VALUES(9,"Project IGI","compatible with windows 7 and above",2);
INSERT INTO PRODUCT VALUES(10,"Hoodie","Black GUCCI for 13 yrs and above",5);
INSERT INTO PRODUCT VALUES(11,"Rich Dad Poor Dad","Written by RObert Kiyosaki",1);
INSERT INTO PRODUCT VALUES(12,"Train Your Brain","By Shireen Stephen",1);

INSERT INTO SUPPLIER_PRICING VALUES(1,1,2,1500);
INSERT INTO SUPPLIER_PRICING VALUES(2,3,5,30000);
INSERT INTO SUPPLIER_PRICING VALUES(3,5,1,3000);
INSERT INTO SUPPLIER_PRICING VALUES(4,2,3,2500);
INSERT INTO SUPPLIER_PRICING VALUES(5,4,1,1000);
INSERT INTO SUPPLIER_PRICING VALUES(6,4,1,322);
INSERT INTO SUPPLIER_PRICING VALUES(7,4,1,1000);
INSERT INTO SUPPLIER_PRICING VALUES(8,4,1,10500);
INSERT INTO SUPPLIER_PRICING VALUES(9,4,1,754);
INSERT INTO SUPPLIER_PRICING VALUES(10,4,1,542);
INSERT INTO SUPPLIER_PRICING VALUES(11,4,1,8765);
INSERT INTO SUPPLIER_PRICING VALUES(12,4,1,1223);
INSERT INTO SUPPLIER_PRICING VALUES(13,4,1,7856);
INSERT INTO SUPPLIER_PRICING VALUES(14,4,1,1234);

INSERT INTO `ORDER` VALUES(101,1500,'2021-10-06',2,1);
INSERT INTO `ORDER` VALUES(102,1000,'2021-10-12',3,5);
INSERT INTO `ORDER` VALUES(103,30000,'2021-09-16',5,2);
INSERT INTO `ORDER` VALUES(104,1500,'2021-10-05',1,1);
INSERT INTO `ORDER` VALUES(105,3000,'2021-08-16',4,3);
INSERT INTO `ORDER` VALUES(106,1450,'2021-08-18',1,9);
INSERT INTO `ORDER` VALUES(107,789,'2021-09-01',3,7);
INSERT INTO `ORDER` VALUES(108,780,'2021-09-07',5,6);
INSERT INTO `ORDER` VALUES(109,3000,'2021-09-10',5,3);
INSERT INTO `ORDER` VALUES(110,2500,'2021-09-10',2,4);
INSERT INTO `ORDER` VALUES(111,1000,'2021-09-15',4,5);
INSERT INTO `ORDER` VALUES(112,789,'2021-09-16',4,7);
INSERT INTO `ORDER` VALUES(113,31000,'2021-09-16',1,8);
INSERT INTO `ORDER` VALUES(114,1000,'2021-09-16',3,5);
INSERT INTO `ORDER` VALUES(115,3000,'2021-09-16',5,3);
INSERT INTO `ORDER` VALUES(116,99,'2021-09-17',2,14);

INSERT INTO RATING VALUES(1,101,4 );
INSERT INTO RATING VALUES(2,102,3 );
INSERT INTO RATING VALUES(3,103,1);
INSERT INTO RATING VALUES(4,104,2 );
INSERT INTO RATING VALUES(5,105,4 );
INSERT INTO RATING VALUES(6,106,3 );
INSERT INTO RATING VALUES(7,107,4 );
INSERT INTO RATING VALUES(8,108,4 );
INSERT INTO RATING VALUES(9,109,3 );
INSERT INTO RATING VALUES(10,110,5 );
INSERT INTO RATING VALUES(11,111,3 );
INSERT INTO RATING VALUES(12,112,4 );
INSERT INTO RATING VALUES(13,113,2 );
INSERT INTO RATING VALUES(14,114,1 );
INSERT INTO RATING VALUES(15,115,1 );
INSERT INTO RATING VALUES(16,116,0 );

/*3)	Display the total number of customers based on gender who have placed orders of worth at least Rs.3000.*/
SELECT COUNT(CUS_GENDER), CUS_GENDER FROM CUSTOMER
INNER JOIN `ORDER` ON `ORDER`.CUS_ID = CUSTOMER.CUS_ID
WHERE ORD_AMOUNT>=3000
GROUP BY CUS_GENDER;

/*4)	Display all the orders along with product name ordered by a customer having Customer_Id=2*/
SELECT * FROM `ORDER`
INNER JOIN CUSTOMER ON CUSTOMER.CUS_ID = `ORDER`.CUS_ID 
INNER JOIN Supplier_pricing ON Supplier_pricing.PRICING_ID = `ORDER`.PRICING_ID 
INNER JOIN PRODUCT ON PRODUCT.PRO_ID = Supplier_pricing.PRO_ID
WHERE `ORDER`.CUS_ID = 2;

/*5)	Display the Supplier details who can supply more than one product.*/
SELECT SUPP_NAME,SUPP_CITY,SUPP_PHONE FROM supplier
INNER JOIN supplier_pricing ON supplier.SUPP_ID = supplier_pricing.SUPP_ID
GROUP BY supplier_pricing.SUPP_ID
HAVING COUNT(supplier_pricing.SUPP_ID)>1;

/*6)	Find the least expensive product from each category and print the table with category id, name, product name and price of the product*/
SELECT MIN(`ORDER`.ORD_AMOUNT),PRODUCT.CAT_ID,CATEGORY.CAT_NAME FROM `ORDER`
INNER JOIN Supplier_pricing ON Supplier_pricing .PRICING_ID = `ORDER`.PRICING_ID
INNER JOIN PRODUCT ON PRODUCT.PRO_ID = Supplier_pricing.PRO_ID
INNER JOIN CATEGORY ON CATEGORY.CAT_ID = PRODUCT.CAT_ID
GROUP BY PRODUCT.CAT_ID;

/*7)	Display the Id and Name of the Product ordered after “2021-10-05”.*/
SELECT PRODUCT.PRO_ID,PRODUCT.PRO_NAME, `ORDER`.ORD_DATE  FROM `ORDER`
INNER JOIN Supplier_pricing ON Supplier_pricing.PRICING_ID = `ORDER`.PRICING_ID 
INNER JOIN PRODUCT ON PRODUCT.PRO_ID = Supplier_pricing.PRO_ID
WHERE ORD_DATE > '2021-10-05'
ORDER BY ORD_DATE ASC;

/*8)	Display customer name and gender whose names start or end with character 'A'.*/
SELECT CUS_NAME, CUS_GENDER FROM customer
WHERE CUS_NAME LIKE 'A%';

/*9)	Create a stored procedure to display supplier id, name, rating and Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average Service” else print “Poor Service”.*/
SELECT Supplier_pricing.SUPP_ID, Supplier.SUPP_NAME, RATING.RAT_RATSTARS,
CASE
	WHEN RATING.RAT_RATSTARS = 5 THEN "Excellent"
    WHEN RATING.RAT_RATSTARS = 4 THEN "Good Service"
    WHEN RATING.RAT_RATSTARS = 3 THEN "Average Service"
    WHEN RATING.RAT_RATSTARS = 2 THEN "Poor Service"
    ELSE "Poor Service"
END AS Type_of_Service
FROM SUPPLIER    
INNER JOIN Supplier_pricing ON Supplier_pricing.SUPP_ID = Supplier.SUPP_ID
INNER JOIN `ORDER` ON `ORDER`.PRICING_ID = Supplier_pricing.PRICING_ID
INNER JOIN RATING ON RATING.ORD_ID = `ORDER`.ORD_ID ;

    
    











